{"version":3,"sources":["components/Header/Header.js","apis/twitter.js","utils/const.js","components/TweetsTime/TweetsTime.js","utils/helpers.js","components/Instruction/Instruction.js","components/Main/Main.js","components/Footer/Footer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","getTweetCreatedTime","id","a","requestUrl","fetch","response","json","data","JSON","parse","body","ALL_CITIES","cityTimezones","cityMapping","TweetsTime","filterOptions","createFilterOptions","limit","useState","displayLocation","setDisplayLocation","displayDateTime","setDisplayDateTime","displayTimezone","setDisplayTimezone","values","link","location","city","city_ascii","lat","lng","pop","country","iso2","iso3","province","state_ansi","timezone","initialValues","validate","errors","onSubmit","setSubmitting","url","tweetId","split","createdAt","targetTimezone","timeLocale","moment","tz","format","setFieldValue","submitForm","isSubmitting","resetForm","component","TextField","name","type","label","variant","fullWidth","style","marginBottom","Autocomplete","freeSolo","options","getOptionLabel","option","value","onChange","e","renderInput","params","CircularProgress","Button","color","disabled","onClick","marginRight","Instruction","Main","Footer","Date","getFullYear","App","Fragment","CssBaseline","Container","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9cdbd0b5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <div>\n      <h1>Social Media Posts Time Retrieval</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","const TWITTER_GET_SINGLE_TWEET_BASE_URL =\n  'https://fj9xc2nlr1.execute-api.ap-southeast-2.amazonaws.com/dev/tweets?id=';\n\nexport async function getTweetCreatedTime(id) {\n  const requestUrl = TWITTER_GET_SINGLE_TWEET_BASE_URL + id;\n  const response = await fetch(requestUrl);\n  const data = await response.json();\n  return JSON.parse(data.body).data;\n}\n","import cityTimezones from 'city-timezones';\n\nexport const TWITTER_LINK_REGEX = /^(https:\\/\\/twitter.com)\\/\\w+\\/status\\//;\nexport const ALL_CITIES = cityTimezones.cityMapping;\n","import React, { useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { TextField } from 'formik-material-ui';\nimport { Autocomplete, createFilterOptions } from '@material-ui/lab';\nimport moment from 'moment';\nimport 'moment-timezone';\nimport { getTweetCreatedTime } from '../../apis/twitter';\nimport { extractTweetId } from '../../utils/helpers';\nimport { ALL_CITIES } from '../../utils/const';\n\nfunction TweetsTime() {\n  const filterOptions = createFilterOptions({\n    limit: 5,\n  });\n  const [displayLocation, setDisplayLocation] = useState('');\n  const [displayDateTime, setDisplayDateTime] = useState('');\n  const [displayTimezone, setDisplayTimezone] = useState('');\n\n  let values = {\n    link: '',\n    location: {\n      city: '',\n      city_ascii: '',\n      lat: null,\n      lng: null,\n      pop: null,\n      country: '',\n      iso2: '',\n      iso3: '',\n      province: '',\n      state_ansi: '',\n      timezone: '',\n    },\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={values}\n        validate={(values) => {\n          const errors = {};\n          if (!values.link) {\n            errors.link = 'The link is required';\n          }\n          return errors;\n        }}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(false);\n          const tweetId = extractTweetId(values.link);\n          const createdAt = await getTweetCreatedTime(tweetId);\n\n          const targetTimezone =\n            values.location.timezone || 'Atlantic/Reykjavik';\n\n          if (values.location.timezone === '') {\n            setDisplayTimezone('UTC');\n            setDisplayLocation(`You did not select a location`);\n          } else {\n            setDisplayTimezone(targetTimezone);\n            setDisplayLocation(\n              `${values.location.city}, ${values.location.province}, ${values.location.country}`\n            );\n          }\n\n          const timeLocale = moment(createdAt)\n            .tz(targetTimezone)\n            .format('dddd, MMMM Do YYYY, h:mm:ss a');\n\n          setDisplayDateTime(timeLocale);\n        }}\n      >\n        {({ setFieldValue, submitForm, isSubmitting, resetForm }) => (\n          <Form>\n            <Field\n              component={TextField}\n              name=\"link\"\n              type=\"text\"\n              label=\"Link\"\n              variant=\"outlined\"\n              fullWidth\n              style={{ marginBottom: '10px' }}\n            />\n            <Autocomplete\n              id=\"location\"\n              name=\"location\"\n              freeSolo\n              options={ALL_CITIES}\n              getOptionLabel={(option) => {\n                if (option.city !== '') {\n                  return `${option.city}, ${option.province}, ${option.country}`;\n                }\n                return '';\n              }}\n              filterOptions={filterOptions}\n              value={values.location}\n              onChange={(e, value) => {\n                setFieldValue('location', value);\n              }}\n              renderInput={(params) => (\n                <Field\n                  component={TextField}\n                  {...params}\n                  name=\"location\"\n                  label=\"Location\"\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              )}\n            />\n            {isSubmitting && <CircularProgress />}\n            <br />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={isSubmitting}\n              onClick={submitForm}\n              style={{ marginRight: '10px' }}\n            >\n              Submit\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"default\"\n              disabled={isSubmitting}\n              onClick={() => {\n                resetForm();\n                setDisplayDateTime('');\n                setDisplayTimezone('');\n                setDisplayLocation('');\n              }}\n            >\n              Clear\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <p>The selected location is:</p>\n      <h2>{displayLocation}</h2>\n      <p>The Timezone of this location is:</p>\n      <h2>{displayTimezone}</h2>\n      <p>The local time of this tweet is: </p>\n      <h2>{displayDateTime}</h2>\n    </div>\n  );\n}\n\nexport default TweetsTime;\n","import cityTimezones from 'city-timezones';\n\n/**\n * return the id of the tweet from a tweet url\n * @param {string} url\n */\nexport function extractTweetId(url) {\n  return url.split('/').pop();\n}\n\n/**\n * Format the datetime string\n * @param {string} datetimeString\n */\nexport function formatDateTime(datetimeString) {\n  const strArr = datetimeString.split(' ');\n  return `${strArr[5]} ${strArr[1]} ${strArr[2]} ${strArr[0]} ${strArr[3]}`;\n}\n\n/**\n * Find all matching result from the citytimezone list\n * @param {string} string\n */\nexport function findCityTimezone(string) {\n  return cityTimezones.findFromCityStateProvince(string);\n}\n","import React from 'react';\n\nfunction Instruction() {\n  return (\n    <div>\n      <h3>Instruction</h3>\n      <p>1. Paste the links of the tweet into the upper text box</p>\n      <p>2. Type and choose a location from the 2nd textbox</p>\n      <p>3. Click the submit button</p>\n      <p>\n        4. The local time of the location you have selected will display on the\n        screen. If the location box is empty, the UTC time will be presented.\n      </p>\n      <p>5. Click the clear button to clear the text box</p>\n    </div>\n  );\n}\n\nexport default Instruction;\n","import React from 'react';\nimport TweetsTime from '../TweetsTime/TweetsTime';\nimport Instruction from '../Instruction/Instruction';\n\nfunction Main() {\n  return (\n    <main>\n      <TweetsTime />\n      <Instruction />\n    </main>\n  );\n}\n\nexport default Main;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <small>&copy; Copyright Francis Lin {new Date().getFullYear()}</small>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Header from '../Header/Header';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container>\n        <Header />\n        <Main />\n        <Footer />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}